type Query {
  currentStoreLogin: Store!
  staffs: [Staff!]!
  staff(id: ID!): Staff!
  stores: [Store!]!
  store(id: ID!): Store!
}

type Mutation {
  loginStore(data: LoginStoreData!): StoreLoginAuthPayload!
  logoutStore: String
  loginStaff(data: LoginStaffData!): StaffLoginAuthPayload!
  createStaff(data: CreateStaffData!): Staff!
  createStore(data: CreateStoreData!): StorefAuthPayload!
  updateStaff(data: UpdateStaffData): Staff!
  deleteStaff(data: DeleteStaffData!): String
}

type Staff {
  id: ID!
  store: Store!
  firstName: String!
  lastName: String!
  gender: Gender!
  officePhone: Int!
  email: String!
  dateOfBirth: String!
  dateOfJoin: String!
  dateOfLeft: String
  commisionPercentage: Int
  jobTitle: String!
  otherDetails: String
  address: String!
}

type Store {
  id: ID!
  email: String!
  areaCode: Int!
  storeName: String!
  storeAddress: String!
  otherDetails: String
  staffs: [Staff!]!
}

type Sales {
  id: ID!
  staff: Staff!
  salesDates: String!
  salesValue: Float!
  salesCommissions: Float!
}

type Product {
  id: ID!
  store: Store!
  productName: String!
  productDescription: String!
  nationalProductPrice: Float!
  nationalReorderQuantity: Int!
  otherProductDetails: String
}

type StaffLoginAuthPayload {
  token: String!
  staff: Staff!
}

type StoreLoginAuthPayload {
  token: String!
  store: Store!
}

type StorefAuthPayload {
  token: String!
  store: Store!
}


enum Gender {
  male
  female
}

input LoginStoreData {
  email: String!
  password: String!
}


input LoginStaffData {
  email: String!
  password: String!
}

input CreateStaffData {
  storeId: ID!
  email: String!
  password: String!
  confirmPassword: String!
  firstName: String!
  lastName: String!
  gender: Gender!
  officePhone: Int!
  dateOfJoin: String!
  dateOfBirth: String!
  dateOfLeft: String
  jobTitle: String!
  jobDescription: String!
  commisionPercentage: Int
  otherDetails: String
  address: String!
}

input UpdateStaffData {
  staffId: ID!
  storeId: ID!
  email: String
  password: String
  confirmPassword: String
  firstName: String
  lastName: String
  gender: Gender
  officePhone: Int
  dateOfJoin: String
  dateOfBirth: String
  dateOfLeft: String
  jobTitle: String
  jobDescription: String
  commisionPercentage: Int
  otherDetails: String
  address: String!
}

input DeleteStaffData {
  id: ID!
  storeId: ID!
}

input CreateStoreData {
  email: String!
  password: String!
  confirmPassword: String!
  areaCode: Int!
  storeName: String!
  storeAddress: String!
  otherDetails: String
}

